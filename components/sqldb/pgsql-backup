#!/bin/sh

#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#  
#    http://www.apache.org/licenses/LICENSE-2.0
#    
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.

# Backup postgresql data directory
here=`echo "import os; print os.path.realpath('$0')" | python`; here=`dirname $here`
root=`echo "import os; print os.path.realpath('$1')" | python`

if [ "$2" = "" ]; then
    host="localhost"
    port="6432"
else
    host="$2"
    port="$3"
fi

pgsql_prefix=`cat $here/pgsql.prefix`

if [ -f "$root/sqldb/log.conf" ]; then
    pgsql_log=`cat $root/sqldb/log.conf`
else
    mkdir -p $root/logs
    pgsql_log="cat >>$root/logs/postgresql"
fi
mkdir -p $root/sqldb
echo $pgsql_log >$root/sqldb/logger

mkdir -p $root/sqldb/backup
mkdir -p $root/sqldb/archive

# Make sure that only one backup is in progress at a time
if [ -f $root/sqldb/backup/inprogress ]; then
    exit 0
fi
touch $root/sqldb/backup/inprogress

# Backup
stamp=`date +%Y%m%d%H%M%S`
$pgsql_prefix/bin/psql -h $host -p $port -c "SELECT pg_start_backup('$stamp', true)" db 2>&1 | sh $root/sqldb/logger

uname=`uname -s`
if [ $uname = "Darwin" ]; then
    tar=gnutar
else
    tar=tar
fi
$tar -C $root/sqldb --exclude data/postmaster.pid --exclude data/postmaster.opts --exclude data/pg_xlog --ignore-failed-read -czf $root/sqldb/backup/$stamp.backup.tar.gz data
rc=$?
if [ "$rc" = "0" ]; then
    mv $root/sqldb/backup/$stamp.backup.tar.gz $root/sqldb/archive/$stamp.backup.tar.gz
fi

$pgsql_prefix/bin/psql -h $host -p $port -c "SELECT pg_stop_backup()" db 2>&1 | sh $root/sqldb/logger

if [ "$rc" != "0" ]; then
    rm -f $root/sqldb/backup/inprogress
    exit $rc
fi

# Clean obsolete backup and WAL files
$here/pgsql-clean-archive $root

rm -f $root/sqldb/backup/inprogress

