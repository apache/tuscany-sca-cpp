#!/bin/sh

#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#  
#    http://www.apache.org/licenses/LICENSE-2.0
#    
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.

# Configure a postgresql hot standby server
here=`echo "import os; print os.path.realpath('$0')" | python`; here=`dirname $here`
mkdir -p $1
root=`echo "import os; print os.path.realpath('$1')" | python`

# Server address
addr=$2
if [ "$addr" = "" ]; then
    ip="*"
    port="5432"
else
    ip=`$here/../../modules/http/httpd-addr ip $addr`
    if [ "$ip" = "" ]; then
        ip="*"
    fi
    port=`$here/../../modules/http/httpd-addr port $addr`
fi

# Master server address
if [ "$3" = "" ]; then
    mhost="localhost"
    mport="5432"
    mhttpport="80"
else
    mhost="$3"
    mport="$4"
    mhttpport="$5"
fi

pgsql_prefix=`cat $here/pgsql.prefix`

if [ -f "$root/sqldb/log.conf" ]; then
    pgsql_log=`cat $root/sqldb/log.conf`
else
    mkdir -p $root/logs
    pgsql_log="cat >>$root/logs/postgresql"
fi
mkdir -p $root/sqldb
echo $pgsql_log >$root/sqldb/logger

mkdir -p $root/sqldb/data
chmod 700 $root/sqldb/data
mkdir -p $root/sqldb/archive

# Initialize from a backup of the master
if [ ! -f $root/sqldb/data/postgresql.conf ]; then
    (curl -L http://$mhost:$mhttpport/pgsql-backup | tar -C $root/sqldb -xz) 2>&1 | sh $root/sqldb/logger
    rm -rf $root/sqldb/data/postmaster.pid $root/sqldb/data/pg_xlog
    mkdir -p $root/sqldb/data/pg_xlog/archive_status
    chmod 700 $root/sqldb/data/pg_xlog/archive_status
fi

# Generate server configuration
cp $root/sqldb/data/postgresql-init.conf $root/sqldb/data/postgresql.conf
cat >>$root/sqldb/data/postgresql.conf <<EOF

# Generated by: standby-conf $*

# Listen
listen_addresses = '$ip'
port = $port

# Setup archival
archive_mode = on
archive_command = 'cp %p $root/sqldb/archive/%f'

# Setup hot standby with streaming replication
wal_level = hot_standby
max_wal_senders = 5
wal_keep_segments = 32

# Enable hot standby
hot_standby = on

EOF

# Generate recovery configuration
cat >$root/sqldb/data/recovery.conf << EOF
# Generated by: pgsql-slave-conf $*

# Start in standby mode
standby_mode = 'on'
primary_conninfo = 'host=$mhost port=$mport'

# Failover
trigger_file = '$root/sqldb/failover'

restore_command = 'curl http://$mhost:$mhttpport/pgsql-archive/%f -o "%p"'

EOF

# Generate database backup script
mkdir -p $root/sqldb/scripts
cat >$root/sqldb/scripts/backup <<EOF
#!/bin/sh
$here/pgsql-backup $root localhost $port
EOF
chmod 700 $root/sqldb/scripts/backup

# Configure HTTPD to serve backup and archive files
if [ -f "$root/conf/httpd.conf" ]; then
    cat >>$root/conf/httpd.conf <<EOF
# Generated by: pgsql-conf $*

# Serve PostgreSQL backup and WAL archive files
ScriptAlias /pgsql-backup "$root/sqldb/scripts/backup"
Alias /pgsql-archive "$root/sqldb/archive"

EOF

fi

