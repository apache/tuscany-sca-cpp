<?xml version="1.0" encoding="UTF-8"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one
   or more contributor license agreements.  See the NOTICE file
   distributed with this work for additional information
   regarding copyright ownership.  The ASF licenses this file
   to you under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at
   
     http://www.apache.org/licenses/LICENSE-2.0
     
   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<project name="TuscanyScaNative_extension_ws" default="all" basedir="../../..">

  <import file="${basedir}/antscripts/system.xml"/>
  <import file="${basedir}/antscripts/compile-targets.xml"/>

  <!--
    Notice that the basedir for this project is set to the TuscanySCA root dir
    This makes path setting in system.xml much simpler, but we'll just have to
    set a property here to this directory.
  -->
  <property name="this.dir"              location="${basedir}/runtime/extensions/ws"/>
  <property name="reference.dir"         value="reference/axis2c/src"/>
  <property name="service.dir"           value="service/axis2c/src"/>
  <property name="ws.dir"                value="tuscany/sca/ws"/>
  <property name="xsd.dir"               location="${this.dir}/xsd"/>
  <property name="reference.core.dir"    location="${this.dir}/${reference.dir}/${ws.dir}"/>
  <property name="reference.model.dir"   location="${this.dir}/${reference.dir}/${ws.dir}/model"/>
  <property name="service.core.dir"      location="${this.dir}/${service.dir}/${ws.dir}"/>
  <property name="service.model.dir"     location="${this.dir}/${service.dir}/${ws.dir}/model"/>
  <property name="reference.lib.dir"     location="${this.dir}/${reference.dir}/.libs"/>
  <property name="service.lib.dir"       location="${this.dir}/${service.dir}/.libs"/>

  <property name="reference.extension.lib"    value="tuscany_sca_ws_reference"/>
  <property name="service.extension.lib"      value="tuscany_sca_ws_service"/>
  <property name="dispatcher.extension.lib"   value="tuscany_sca_ws_dispatcher"/>
  <property name="ws.extension.install.dir"   location="${tuscanySCA.install.dir}/extensions/ws"/>

  <!--
    All the cpp files per subdirectory
    New classes should be added to these properties
  -->

  <property
    name="reference.core.cpp.files"
    value="Axis2Client.cpp WSServiceBindingExtension.cpp WSServiceWrapper.cpp"/>

  <property
    name="reference.model.cpp.files"
    value="WSServiceBinding.cpp"/>

  <property
    name="service.core.cpp.files"
    value="Axis2Dispatcher.cpp
           Axis2DispatcherModule.cpp
           Axis2Service.cpp
           Axis2Utils.cpp
           WSReferenceBindingExtension.cpp
           WSServiceProxy.cpp"/>

  <property
    name="service.core.obj.files"
    value="Axis2Service${object.ext}
           Axis2Utils${object.ext}
           WSReferenceBindingExtension${object.ext}
           WSServiceProxy${object.ext}"/>

  <property
    name="service.core.dispatcher.obj.files"
    value="Axis2Dispatcher${object.ext}
           Axis2DispatcherModule${object.ext}"/>

  <property
    name="service.model.cpp.files"
    value="WSReferenceBinding.cpp"/>

  <property
    name="xsd.files"
    value="sca-binding-webservice.xsd"/>

  <!--
    Public targets
  -->
  <target name="all" description="Compile, link, and install all TuscanyScaNative ws extension source code">
    <antcall target="compile"/>
    <antcall target="link"/>
    <antcall target="install"/>
  </target>

  <target name="build" description="Compile and link all TuscanyScaNative ws extension source code">
    <antcall target="compile"/>
    <antcall target="link"/>
  </target>

  <target name="compile" description="Compile all TuscanyScaNative ws extension source code">
    <antcall target="compile.ws.reference.core"/>
    <antcall target="compile.ws.reference.model"/>
    <antcall target="compile.ws.service.core"/>
    <antcall target="compile.ws.service.model"/>
  </target>

  <target name="link" description="Link all TuscanyScaNative ws extension source code">
    <antcall target="link.ws.reference"/>
    <antcall target="link.ws.service"/>
    <antcall target="link.ws.service.dispatcher"/>
  </target>

  <target name="install" description="Install TuscanyScaNative ws extension libraries and headers">
    <antcall target="install.ws.reference"/>
    <antcall target="install.ws.service"/>
    <antcall target="install.ws.xsd"/>
  </target>

  <target name="clean" description="Clean all TuscanyScaNative ws extension compiled source code">
    <antcall target="clean.ws.reference"/>
    <antcall target="clean.ws.service"/>
    <antcall target="clean.ws.xsd"/>
  </target>

  <!--
    Internal targets
    They can still be called, they're just not described, so wont show up in "ant -p"
  -->

    <!-- compile -->

  <target name="compile.ws.reference.core">
    <if>
      <equals arg1="${enable_ws}" arg2="true"/>
      <then>
        <cpp-compile
            srcdir="${reference.core.dir}"
            objdir="${reference.lib.dir}"
            infiles="${reference.core.cpp.files}">
          <custom-cc-elements>
            <includepath path="${this.dir}/${reference.dir}"/>
            <includepath path="${axis2c.home.dir}/include"/>
          </custom-cc-elements>
        </cpp-compile>
      </then>
      <else>
        <echo
            message="TuscanySCA ws is not enabled since Axis2c has not been specified"
            level="warning"/>
      </else>
    </if>
  </target>

  <target name="compile.ws.reference.model">
    <if>
      <equals arg1="${enable_ws}" arg2="true"/>
      <then>
        <cpp-compile
            srcdir="${reference.model.dir}"
            objdir="${reference.lib.dir}"
            infiles="${reference.model.cpp.files}">
          <custom-cc-elements>
            <includepath path="${this.dir}/${reference.dir}"/>
          </custom-cc-elements>
        </cpp-compile>
      </then>
      <else>
        <echo
            message="TuscanySCA ws is not enabled since Axis2c has not been specified"
            level="warning"/>
      </else>
    </if>
  </target>

  <target name="compile.ws.service.core">
    <if>
      <equals arg1="${enable_ws}" arg2="true"/>
      <then>
        <cpp-compile
            srcdir="${service.core.dir}"
            objdir="${service.lib.dir}"
            infiles="${service.core.cpp.files}">
          <custom-cc-elements>
            <includepath path="${this.dir}/${service.dir}"/>
            <includepath path="${axis2c.home.dir}/include"/>
          </custom-cc-elements>
        </cpp-compile>
      </then>
      <else>
        <echo
            message="TuscanySCA ws is not enabled since Axis2c has not been specified"
            level="warning"/>
      </else>
    </if>
  </target>

  <target name="compile.ws.service.model">
    <if>
      <equals arg1="${enable_ws}" arg2="true"/>
      <then>
        <cpp-compile
            srcdir="${service.model.dir}"
            objdir="${service.lib.dir}"
            infiles="${service.model.cpp.files}">
          <custom-cc-elements>
            <includepath path="${this.dir}/${service.dir}"/>
          </custom-cc-elements>
        </cpp-compile>
      </then>
      <else>
        <echo
            message="TuscanySCA ws is not enabled since Axis2c has not been specified"
            level="warning"/>
      </else>
    </if>
  </target>

    <!-- link -->

  <target name="link.ws.reference">
    <cpp-link
        outfile="${reference.extension.lib}"
        outdir="${reference.lib.dir}"
        indir="${reference.lib.dir}"
        infiles="*${object.ext}"/>
  </target>

  <target name="link.ws.service">
    <cpp-link
        outfile="${service.extension.lib}"
        outdir="${service.lib.dir}"
        indir="${service.lib.dir}"
        infiles="${service.core.obj.files}"/>
  </target>

  <target name="link.ws.service.dispatcher">
    <cpp-link
        outfile="${dispatcher.extension.lib}"
        outdir="${service.lib.dir}"
        indir="${service.lib.dir}"
        infiles="${service.core.dispatcher.obj.files}"/>
  </target>

    <!-- install -->

  <target name="install.ws.reference">
    <cpp-install-file
        srcfile="${lib.prefix}${reference.extension.lib}${lib.ext}"
        destfile="${lib.prefix}${reference.extension.lib}${lib.ext}${tuscanySCA.library.version}"
        srcdir="${reference.lib.dir}"
        destdir="${ws.extension.install.dir}/reference/lib"/>
    <cpp-symlink
        linkdir="${ws.extension.install.dir}/reference/lib"
        link="${lib.prefix}${reference.extension.lib}${lib.ext}"
        resource="${lib.prefix}${reference.extension.lib}${lib.ext}${tuscanySCA.library.version}"/>
    <cpp-symlink
        linkdir="${ws.extension.install.dir}/reference/module"
        link="${lib.prefix}${reference.extension.lib}${lib.ext}"
        resourcedir="${ws.extension.install.dir}/reference/lib"
        resource="${lib.prefix}${reference.extension.lib}${lib.ext}"/>
  </target>

  <target name="install.ws.service">
       <!-- install files in the root service extension directory -->
    <cpp-install-file
        srcfile="axis2.xml"
        srcdir="${this.dir}/${service.dir}"
        destdir="${ws.extension.install.dir}/service"
        executable="false"/>
    <cpp-install-file
        srcfile="deploy${script.ext}"
        srcdir="${this.dir}/${service.dir}"
        destdir="${ws.extension.install.dir}/service"/>

       <!-- install and link service extenstion lib -->
    <cpp-install-file
        srcfile="${lib.prefix}${service.extension.lib}${lib.ext}"
        destfile="${lib.prefix}${service.extension.lib}${lib.ext}${tuscanySCA.library.version}"
        srcdir="${service.lib.dir}"
        destdir="${ws.extension.install.dir}/service/lib"/>
    <cpp-symlink
        linkdir="${ws.extension.install.dir}/service/lib"
        link="${lib.prefix}${service.extension.lib}${lib.ext}"
        resource="${lib.prefix}${service.extension.lib}${lib.ext}${tuscanySCA.library.version}"/>
    <cpp-symlink
        linkdir="${ws.extension.install.dir}/service/module"
        link="${lib.prefix}${service.extension.lib}${lib.ext}"
        resourcedir="${ws.extension.install.dir}/service/lib"
        resource="${lib.prefix}${service.extension.lib}${lib.ext}"/>

       <!-- install and link service dispatcher extenstion lib -->
    <cpp-install-file
        srcfile="${lib.prefix}${dispatcher.extension.lib}${lib.ext}"
        destfile="${lib.prefix}${dispatcher.extension.lib}${lib.ext}${tuscanySCA.library.version}"
        srcdir="${service.lib.dir}"
        destdir="${ws.extension.install.dir}/service/lib"/>
    <cpp-symlink
        linkdir="${ws.extension.install.dir}/service/lib"
        link="${lib.prefix}${dispatcher.extension.lib}${lib.ext}"
        resource="${lib.prefix}${dispatcher.extension.lib}${lib.ext}${tuscanySCA.library.version}"/>

       <!-- create and setup the service/modules/tuscany directory -->
    <cpp-symlink
        linkdir="${ws.extension.install.dir}/service/modules/tuscany"
        link="${lib.prefix}${dispatcher.extension.lib}${lib.ext}"
        resourcedir="${ws.extension.install.dir}/service/lib"
        resource="${lib.prefix}${dispatcher.extension.lib}${lib.ext}"/>
    <cpp-install-file
        srcfile="module.xml"
        srcdir="${this.dir}/${service.dir}"
        destdir="${ws.extension.install.dir}/service/modules/tuscany"
        executable="false"/>

       <!-- create and setup the service/services/tuscany directory -->
    <cpp-symlink
        linkdir="${ws.extension.install.dir}/service/services/tuscany"
        link="${lib.prefix}${service.extension.lib}${lib.ext}"
        resourcedir="${ws.extension.install.dir}/service/lib"
        resource="${lib.prefix}${service.extension.lib}${lib.ext}"/>
    <cpp-install-file
        srcfile="services.xml"
        srcdir="${this.dir}/${service.dir}"
        destdir="${ws.extension.install.dir}/service/services/tuscany"
        executable="false"/>
  </target>

  <target name="install.ws.xsd">
    <cpp-install-files
        files="${xsd.files}"
        srcdir="${xsd.dir}"
        destdir="${ws.extension.install.dir}/xsd"/>
  </target>

    <!-- clean -->

  <target name="clean.ws.reference">
    <cpp-clean-files
        dir="${ws.extension.install.dir}/reference/lib"
        rmdir="true"/>
    <cpp-clean-files
        dir="${ws.extension.install.dir}/reference/module"
        rmdir="true"/>
    <cpp-clean-files
        dir="${ws.extension.install.dir}/reference"
        rmdir="true"/>
    <delete dir="${reference.lib.dir}" quiet="true"/>
  </target>

  <target name="clean.ws.service">
    <cpp-clean-files
        dir="${ws.extension.install.dir}/service/lib"
        rmdir="true"/>
    <cpp-clean-files
        dir="${ws.extension.install.dir}/service/module"
        rmdir="true"/>
    <cpp-clean-files
        dir="${ws.extension.install.dir}/service/modules/tuscany"
        rmdir="true"/>
    <cpp-clean-files
        dir="${ws.extension.install.dir}/service/services/tuscany"
        rmdir="true"/>
    <cpp-clean-files
        dir="${ws.extension.install.dir}/service"
        rmdir="true"/>
    <delete dir="${service.lib.dir}" quiet="true"/>
  </target>

  <target name="clean.ws.xsd">
    <cpp-clean-files
        dir="${ws.extension.install.dir}/xsd"
        rmdir="true"/>
  </target>

</project>
